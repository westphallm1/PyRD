"""should probably jinja-fy this"""
PREFIX ='''\
##
## This code was generated by a tool.
## All manual changes will be overwritten!
##
## pyrd 0.1.0
##
from pyrd.pyrd import *

def standardize_result(result):
    """ Return a ParseObjectBoth inside of a ParseObjectEither
    """
    if not isinstance(result,ParseObjectEither):
        result = ParseObjectEither(result, 0)
    if not isinstance(result.choice,ParseObjectBoth):
        both = ParseObjectBoth()
        both.append(result.choice)
        result.choice = both
    return result

'''
CLASS_TEMPLATE = """\
class {ID}(Parser):
{HANDLER}
{HANDLER_RR}
{PARSER}
"""

PARSE_TEMPLATE = """\
    def parse(self, string):
        parsed = ({PARSERS}).parse(string)
        if parsed:
            parsed.result = standardize_result(parsed.result)
            parsed.result = self.handle_parsed(parsed.result)
        return parsed
"""

HANDLER_TEMPLATE = """\
    def handle_parsed(self,parsed_choice):
        parsed = parsed_choice.choice
{CODE}
"""

RIGHT_RECURSIVE_TEMPLATE = """\
    def handle_rr(self,parsed_choice):
{CODE}
"""
CHOICE_TEMPLATE = """\
        if parsed_choice.index == {IDX}:
            {IDS}
            {FUNCTION}
"""
RR_CHOICE_TEMPLATE = """\
        if parsed_choice.index == {IDX}:
            def _helper(parsed_choice):
                parsed = parsed_choice.choice
                {IDS}
                {FUNCTION}
            base = parsed_choice.choice[0].base
            for case in parsed_choice.choice[0].unrolled[::-1]:
                case_choice = ParseObjectEither(case,0)
                case_choice.choice.append(base)
                base = _helper(case_choice)
            return base
"""
