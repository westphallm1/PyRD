grammar :: rules "%%" suffix {return GrammarResult(rules[::-1],suffix)};

suffix :: /(\n|[^\n])*/ {return parsed[0]};

rules :: rule ";" rules {rules.append(rule); return rules}
      | rule ";"{return [rule]};

rule :: id "::" sequences {return RuleResult(id,sequences[::-1])};

sequences :: sequence "|" sequences {sequences.append(sequence); return \
                                     sequences}
        | sequence {return [sequence]};

sequence :: lexers function {return SeqResult(lexers[::-1],function)}
        | lexers {return SeqResult(lexers,None)};

function :: "{" pylit "}" {return pylit};
pylit :: pystr pybrack pylit {return ''.join([pystr,pybrack,pylit])}
       | pystr {return pystr};
pystr :: /[^{}]*/ {return parsed[0]};
pybrack :: "{" pylit "}" {return "{" + pylit + "}"};

lexers :: lexer lexers {lexers.append(lexer); return lexers}
        | lexer {return [lexer]};
lexer :: id {return LexResult(0,id)}
       | strlit {return LexResult(1,strlit)}
       | regex {return LexResult(2,regex)};
strlit :: "\"" /(\\"|[^"])*/ "\"" {return parsed[1]};
regex :: "/" /(\\/|[^\/])*/ "/" {return parsed[1]};
id :: /[a-zA-Z_][a-zA-Z0-9_]*/{return parsed[0]};
%%
from pyrd.pyrd_gen import *
if __name__=='__main__':
    with open(sys.argv[1]) as gramf:
        to_parse = gramf.read()
        parsed = Grammar().parse(to_parse)
        if parsed:
            print("Grammar parsed sucessfully.")
            parsed.result.gen_code(sys.argv[2])
        else:
            print("Error:",parsed.err(to_parse))
            exit(1)


